#include "s21_matrix_oop.h"
#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <time.h>
#include <unistd.h>


#test eq_matrix
const int rows = rand_r(&time(NULL)) % 100 + 1;
const int cols = rand_r(&time(NULL)) % 100 + 1;
S21Matrix A(rows, cols);
S21Matrix* B = new S21Matrix(rows, cols);
double k = 0.1;
for (int i = 0; i < rows; i++) {
    for (int j = 0; j < cols; j++) {
        double rand_val = rand_r(&time(NULL)) % 2001 - 1000 + k;
        A.matrix[i][j] = rand_val;
        B->matrix[i][j] = rand_val;
        k += 0.000001;
    }
}
ck_assert_int_eq(A.EqMatrix(*B), SUCCESS);


#test not_eq_matrix
const int rows = rand_r(&time(NULL)) % 100 + 1;
const int cols = rand_r(&time(NULL)) % 100 + 1;
S21Matrix A(rows, cols);
S21Matrix* B = new S21Matrix(rows, cols);
double k = 0.1;
for (int i = 0; i < rows; i++) {
    for (int j = 0; j < cols; j++) {
        double rand_val = rand_r(&time(NULL)) % 2001 - 1000 + k;
        A.matrix[i][j] = rand_val;
        B->matrix[i][j] = 2 * rand_val;
        k += 0.000001;
    }
}
ck_assert_int_eq(A.EqMatrix(*B), FAILURE);

#test not_rows_eq_matrix
const int rows = rand_r(&time(NULL)) % 100 + 1;
const int cols = rand_r(&time(NULL)) % 100 + 1;
S21Matrix A(rows, cols);
S21Matrix* B = new S21Matrix(rows + 10, cols);
for (int i = 0; i < rows; i++) {
    for (int j = 0; j < cols; j++) {
        double rand_val = rand_r(&time(NULL)) % 2001 - 1000;
        A.matrix[i][j] = rand_val;
    }
}
for (int i = 0; i < rows + 10; i++) {
    for (int j = 0; j < cols; j++) {
        double rand_val = rand_r(&time(NULL)) % 2001 - 1000;
        B->matrix[i][j] = rand_val;
    }
}
ck_assert_int_eq(A.EqMatrix(*B), FAILURE);

#test sum_matrix
const int rows = rand_r(&time(NULL)) % 100 + 1;
const int cols = rand_r(&time(NULL)) % 100 + 1;
S21Matrix A(rows, cols);
S21Matrix* B = new S21Matrix(rows, cols);
S21Matrix* CHECK = new S21Matrix(rows, cols);
double k = 0.1;
for (int i = 0; i < rows; i++) {
    for (int j = 0; j < cols; j++) {
        double rand_val = rand_r(&time(NULL)) % 2001 - 1000 + k;
        A.matrix[i][j] = rand_val;
        B->matrix[i][j] = rand_val + 0.015;
        CHECK->matrix[i][j] = 2 * rand_val + 0.015;
        k += 0.000001;
    }
}
A.SumMatrix(*B);
ck_assert_int_eq(A.EqMatrix(*CHECK), SUCCESS);



